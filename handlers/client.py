import sqlite3

from aiogram import types, Dispatcher
from aiogram.types import InputFile, MediaGroup
from aiogram.dispatcher import FSMContext
import datetime
from datetime import datetime

from create_bot import dp, bot, NICKNAME_BOT, YOUR_CHAT_ID
from data_base import sqlite_db
from data_base.sqlite_db import on_user_register, update_user, sql_read, show_categories, load_data_to_google_newsletterl

from handlers.email_address import process_phone_button_email
from handlers.newsletter_user import send_reset_newsletter
from handlers.number_phone import process_phone_button_three
from handlers.other import MyState, DownloadPhotoState, GreetingState, CallToActionState, UpdateLinkState, blockchaine_command_handler
from keyboards.client_kb import (button_case_sale, button_done, keyboard_chat, keyboard_kino, keyboard_auto_moto,
                                 keyboard_job, keyboard_love, keyboard_beautiful, keyboard_style, button_case_menu,
                                 keyboard_support, keyboard_runet, keyboard_digest, keyboard_chat_foto, keyboard_token,
                                 keyboard_reset_back, make_keyboard_98, make_phone_button, make_number_update_calls,
                                 register_referrals_chat_button, register_referrals_email, make_request_setting_button,
                                 make_profile_setting_button_back, make_reset_questions_back_profile_button,
                                 make_reset_questions_back_menu_button, make_request_location_button)
import asyncio
import os
import openai
from keyboards.gpt_kb import markup_Chat_gpt, button_done_gpt_turbo, gpt_button_setting
from data_base.db_gpt_chat import Database
import config


db = Database(config.db_path)
db.create_users_table()

openai.api_key = os.getenv('TOKEN_AI')

moderator_id = YOUR_CHAT_ID  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ID —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞


group_together = '[1Ô∏è‚É£ –ò–∑—É—á–∏ –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –ø–æ –∏–≥—Ä–µ –í–º–µ—Å—Ç–µ!](https://t.me/guide_Vmeste)'
group_together_two = '[2Ô∏è‚É£ –ü–æ–ª—É—á–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É](https://t.me/crypto_Vmeste)'
group_together_three = '[3Ô∏è‚É£ –ü—Ä–æ–π–¥–∏ –æ–±—É—á–µ–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–π –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å](http://academia.applovers.ru/lectures)'
group_together_fore = '[4Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞ –æ–±—É—á–µ–Ω–∏–µ?](https://t.me/payments_Vmeste)'


# ======================================== –±–ª–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è ========================================
#
group_link_start = {'text': '—Å–æ–æ–±—â–µ–Ω–∏—è', 'url': 'https://t.me/testchat999'}
greeting_message_start = '–ü—Ä–∏–≤–µ—Ç, {first_name} –Ω–∞—à —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤–∞—Å 24/7\n\n–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏–∑ —ç—Ç–æ–≥–æ [{text}]({url})\n\n'


async def get_user_data(user_id):
    user = db.get_user(user_id)
    if not user:
        db.add_new_user(user_id)
        user = db.get_user(user_id)
    return user


async def commands_gpt(message: types.Message):
    user = await get_user_data(message.from_user.id)
    await bot.send_message(message.from_user.id, f'`–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}! OPEN AI`\n\n'
                                                 f'–°—Ç—Ä–æ—è—Ç –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, '
                                                 f'–∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ò–ò –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á–∏.\n\n'
                                                 f'`175B –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –º–æ–¥–µ–ª–∏`\n\n'
                                                 f'`600k+ –ì–ë —Ç–µ–∫—Å—Ç–∞`\n\n'
                                                 f'`100M+ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`\n\n', reply_markup=gpt_button_setting(), parse_mode='Markdown')
    if user[2] == 'None':
        if user[1] <= 0:
            await bot.send_message(message.from_user.id, "–í–∞—à –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –û—Ñ–æ—Ä–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—Å–∫—É.",
                                   reply_markup=button_done_gpt_turbo)
        else:
            await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç! –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {user[1]} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.')


async def command_start(message: types.Message):
    await message.delete()
    user = await get_user_data(message.from_user.id)
    photo = InputFile("TestMir/photos/b_telegram_cover.webp")
    await bot.send_photo(message.chat.id, photo=photo)
    formatted_greeting = greeting_message_start.format(first_name=message.from_user.first_name, **group_link_start)
    await bot.send_message(message.chat.id, text=formatted_greeting, parse_mode='Markdown')
    if not sqlite_db.user_exists(message.from_user.id):
        start_command = message.text
        user = message.from_user
        user_id = user.id
        first_name = user.first_name
        last_name = user.last_name
        phone_number = None
        email_address = None
        username = user.username
        purchase_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        discount = None
        newsletter = None
        referrer_id = start_command.split("/start=")[-1]
        referrer_id = ''.join(filter(str.isdigit, referrer_id))
        on_user_register(user_id, username, first_name, last_name, phone_number, email_address, purchase_date, discount, newsletter, referrer_id)

        if referrer_id:
            if referrer_id != str(message.from_user.id):
                sqlite_db.add_user(message.from_user.id, username, first_name, last_name, phone_number, email_address, purchase_date, discount, newsletter, referrer_id)
                try:
                    await bot.send_message(referrer_id, f'–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n'
                                                        f'üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\nü¶∞üßîüèª‚Äç –ò–º—è: {first_name} {last_name}\n'
                                                        f'üåê –ù–∏–∫–Ω–µ–π–º: @{username}!')
                except:
                    pass
            else:
                await bot.send_message(message.from_user.id, '–ù–µ–ª—å–∑—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ')
        else:
            sqlite_db.add_user(message.from_user.id, username, first_name, last_name, phone_number, email_address, purchase_date, discount, newsletter)
            await bot.send_message(
                message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', reply_markup=make_phone_button())
    else:
        await bot.send_message(message.from_user.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')


# ======================================== –±–ª–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è ========================================


# @dp.message_handler(commands=['set_greeting'])
async def set_greeting(message: types.Message):
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:')
    await GreetingState.SettingGreeting.set()


# @dp.message_handler(state=GreetingState.SettingGreeting)
async def process_greeting_step(message: types.Message, state: FSMContext):
    global greeting_message_start
    greeting_message_start = '*'+message.text+'*' + ' [{text}]({url})\n\n'
    await message.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Å—Å—ã–ª–∫—É:')
    await bot.send_message(message.chat.id, text=f"[{group_link_start['text']}]({group_link_start['url']})", parse_mode='Markdown')
    await state.finish()


# @dp.message_handler(commands=['set_call_to_action'])
async def set_call_to_action(message: types.Message):
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–∑—ã–≤–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—é:')
    await CallToActionState.SettingCallToAction.set()


# @dp.message_handler(state=CallToActionState.SettingCallToAction)
async def process_call_to_action_step(message: types.Message, state: FSMContext):
    global group_link_start
    group_link_start['text'] = message.text
    await message.reply('–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!')
    await state.finish()


# @dp.message_handler(commands=['link'])
async def link_to_update(message: types.Message):
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É')
    await UpdateLinkState.SettingLink.set()


# @dp.message_handler(state=CallToActionState.SettingCallToAction)
async def process_link_to_update(message: types.Message, state: FSMContext):
    global group_link_start
    if 'https://' in message.text:
        group_link_start['url'] = message.text
        await message.reply('–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!')
        await state.finish()
    else:
        await bot.send_message(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å https://')


async def on_chat_member_join_start(message: types.Message):
    chat_id = message.chat.id
    for new_member in message.new_chat_members:
        formatted_greeting = greeting_message_start.format(first_name=new_member.first_name, **group_link_start)
        await bot.send_message(chat_id, text=formatted_greeting, reply_to_message_id=message.message_id,
                               parse_mode='Markdown', reply_markup=register_referrals_chat_button())

# ======================================== –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è =======================================


async def handle_profile(message: types.Message):
    await message.delete()
    user = message.from_user
    user_id = user.id
    first_name = user.first_name
    last_name = user.last_name
    username = user.username
    referral_link = f'https://t.me/{NICKNAME_BOT}?start={user_id}'
    update_user(user_id, username)
    sqlite_db.cursor_user_register.execute("SELECT discount FROM users WHERE user_id = ?", (user_id,))
    result = sqlite_db.cursor_user_register.fetchone()
    discount = result[0] if result else None
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    sqlite_db.cursor_user_register.execute('SELECT newsletter FROM users WHERE user_id = ?', (user_id,))
    result = sqlite_db.cursor_user_register.fetchone()
    newsletter = result[0] if result else None
    try:
        # –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        sqlite_db.cursor_user_register.execute("SELECT phone_number FROM users WHERE user_id = ?", (user_id,))
        result = sqlite_db.cursor_user_register.fetchone()
        phone_number = result[0] if result else None
        # –ü–æ–ª—É—á–∏—Ç—å email –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        sqlite_db.cursor_user_register.execute("SELECT email_address FROM users WHERE user_id = ?", (user_id,))
        result = sqlite_db.cursor_user_register.fetchone()
        email_address = result[0] if result else None
    except sqlite3.OperationalError:
        await bot.send_message(message.from_user.id, '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è /start\n'
                                                     '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ /call\n'
                                                     '–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã /email')
        return

    if phone_number and email_address:
        await bot.send_message(message.from_user.id, f'üë§ –í–∞—à ID: {user_id}\nüë§ –ò–º—è: {first_name} {last_name}\n'
                                                     f'üåê –ù–∏–∫–Ω–µ–π–º: @{username}\n'
                                                     f'üì≤ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n'
                                                     f'üì© Email: {email_address}\n'
                                                     f'üàπ –í–∞—à–∞ —Å–∫–∏–¥–∫–∞: {discount}%\n–ë–æ–ª—å—à–µ –û –°–ö–ò–î–ö–ê–•\n–£–∑–Ω–∞—Ç—å /disc\n\n'
                                                     f'üì¨ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {newsletter}\n\n'
                                                     f'üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}\n'
                                                     f'üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {sqlite_db.count_referals(message.from_user.id)}',
                               reply_markup=make_request_setting_button())
    else:
        await bot.send_message(message.from_user.id, '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è /start\n'
                                                     '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ /call\n'
                                                     '–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã /email')
        return

    register_referrals = '\n–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥, –ø—Ä–∏–≥–ª–∞—à–∞—é —Ç–µ–±—è –≤ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç.\n'
    text_message_hello = f'\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º, {first_name} {last_name}.\n\n'

    markup_register_button = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text='üîù Telegram',
                                        switch_inline_query='{} {} {}'.format(register_referrals, text_message_hello,
                                                                              referral_link))
    button_whatsapp = types.InlineKeyboardButton(text='üîú WhatsApp',
                                                 url=f'https://api.whatsapp.com/send?text={register_referrals}{text_message_hello}{referral_link}')
    markup_register_button.add(button, button_whatsapp)

    await bot.send_message(message.from_user.id, f'*–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ–º—É –¥—Ä—É–≥—É –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É*:',
                           reply_markup=markup_register_button,
                           parse_mode='Markdown')
    load_data_to_google_newsletterl()


async def settings_phone_email(message: types.Message):
    photo = InputFile("TestMir/photos/settingsss.png")
    await bot.send_photo(message.chat.id, photo=photo)
    await bot.send_message(message.from_user.id, f'`–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏`', reply_markup=make_profile_setting_button_back(), parse_mode='Markdown')
    await bot.send_message(message.from_user.id, f'*–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è*?', reply_markup=make_number_update_calls(), parse_mode='Markdown')
    await bot.send_message(message.from_user.id, f'*–í–∞—à email address –∏–∑–º–µ–Ω–∏–ª—Å—è*?', reply_markup=register_referrals_email(), parse_mode='Markdown')
    await send_reset_newsletter(message)


async def item1_handler(message: types.Message):
    await message.delete()
    # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (—à–∏—Ä–æ—Ç–∞ –∏ –¥–æ–ª–≥–æ—Ç–∞)
    latitude, longitude = 52.91759031218117, 36.010957755275136
    await bot.send_message(message.from_user.id, '_–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º:_\n\n'
                                                 '`–ü–Ω-–°–±: 10:00 - 19:00`\n`–í—Å:    10:00 - 17:00`',
                           parse_mode='Markdown')
    await bot.send_location(message.from_user.id, latitude, longitude)


async def item2_handler(message: types.Message):
    await message.delete()
    request = "*–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –ª–æ–∫–∞—Ü–∏—é –¥–æ—Å—Ç–∞–≤—â–∏–∫—É*."
    await bot.send_message(message.from_user.id, request, reply_markup=make_request_location_button(), parse_mode='Markdown')


async def handle_location(message: types.Message):
    latitude = message.location.latitude
    longitude = message.location.longitude
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –µ–≥–æ –∏–º—è, id, –Ω–∏–∫–Ω–µ–π–º
    user = message.from_user
    user_id = user.id
    first_name = user.first_name
    username = user.username

    message_user = f'–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:\n–ò–º—è: {first_name}\nID: {user_id}\n–ù–∏–∫–Ω–µ–π–º: @{username}'

    await bot.send_location(moderator_id, latitude, longitude)
    await bot.send_message(moderator_id, message_user)
    await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é! –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.")


# ==================================== –ú–∞–≥–∞–∑–∏–Ω ========================================

async def item3_handler(message: types.Message):
    await message.delete()
    await show_categories(message)
    await bot.send_message(
        message.from_user.id, '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ" '
                              '*–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞*', reply_markup=button_done, parse_mode='Markdown')


async def handle_show_category(call):
    category = call.data.split()[1]
    await sql_read(call.message, category)


def startswith_show_category(call: types.CallbackQuery):
    return call.data.startswith('show_category')

# ==================================== end –ú–∞–≥–∞–∑–∏–Ω ========================================


async def item6_handler(message: types.Message):
    await message.delete()
    video = types.InputFile("TestMir/photos/IMG_6775.MP4")
    await bot.send_video(message.chat.id, video=video)
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª', reply_markup=button_case_menu)


async def menu_support(message: types.Message):
    await message.delete()
    currency_message_5 = await bot.send_message(
        message.from_user.id,
        f'`{message.from_user.first_name}, –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ –∏–ª–∏ "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" '
        f'—á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é`'
        f'', reply_markup=keyboard_support, parse_mode='Markdown')
    sent_message = currency_message_5
    await asyncio.sleep(60 * 5)
    await bot.delete_message(chat_id=sent_message.chat.id, message_id=sent_message.message_id)


async def menu_together(message: types.Message):
    await message.delete()
    currency_message_5 = await bot.send_message(
        message.from_user.id, f'`{message.from_user.first_name}, ‚úÖ –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –ù–û–í–ò–ß–ö–û–í –ò–ì–†–´ –í–ú–ï–°–¢–ï!`\n'
                              f'üåç –£–≤–∞–∂–∞–µ–º—ã–π –Ω–æ–≤–∏—á–æ–∫ –∏–≥—Ä—ã!  –ò–∑—É—á–∞–π –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Å—Å—ã–ª–∫–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.  '
                              f'–ü–æ–ª—É—á–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É + –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ –∏ —Ç–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤.'
                              f' –û–±—É—á–∏—Å—å –∏–º –∏ –Ω–∞—á–∏–Ω–∞–π –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!\n\n{group_together}\n\n{group_together_two}\n\n'
                              f'{group_together_three}\n\n{group_together_fore}'
                              f'', parse_mode='Markdown')
    sent_message = currency_message_5
    await asyncio.sleep(60 * 5)
    await bot.delete_message(chat_id=sent_message.chat.id, message_id=sent_message.message_id)


async def menu_runet(message: types.Message):
    await message.delete()
    photo = InputFile("TestMir/photos/photo_2023-07-09_03-05-16.jpg")
    await bot.send_photo(message.chat.id, photo=photo)
    currency_message_5 = await bot.send_message(
        message.from_user.id, f'{message.from_user.first_name}, –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç–µ–±—è –∂–¥–µ—Ç –≥–æ—Ä—è—á–∞—è –¥–µ—Å—è—Ç–∫–∞ –∏–∑:\n\n'
                              f'`#–ù–û–í–û–°–¢–ò_–ò_–û–ë–©–ï–°–¢–í–û, #–≠–ö–û–ù–û–ú–ò–ö–ê_–ò_–ë–ò–ó–ù–ï–°\n#–°–ï–ú–¨–Ø_–ò_–î–û–ú, #–ö–†–ê–°–û–¢–ê_–ò_–ó–î–û–†–û–í–¨–ï\n'
                              f'#–ù–ê–£–ö–ê_–ò_–¢–ï–•–ù–ò–ö–ê, #–õ–ò–ß–ù–û–°–¢–¨_–ò_–û–¢–ù–û–®–ï–ù–ò–Ø,\n#–ò–ù–¢–ï–†–ï–°–ù–û_–ò_–ü–û–õ–ï–ó–ù–û, #–ü–û–ó–ù–ê–ù–ò–ï\n'
                              f'#–†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø, #–†–ê–ó–ù–û–ï`', reply_markup=keyboard_runet, parse_mode='Markdown')
    sent_message = currency_message_5
    await asyncio.sleep(60 * 5)
    await bot.delete_message(chat_id=sent_message.chat.id, message_id=sent_message.message_id)


async def menu_digest(message: types.Message):
    await message.delete()
    photo = InputFile("TestMir/photos/brain-games-quizzes-puzzles.png")
    await bot.send_photo(message.chat.id, photo=photo)
    currency_message_5 = await bot.send_message(
        message.from_user.id, f'{message.from_user.first_name}, –ª—É—á—à–µ–µ –¥–ª—è —Ç–µ–±—è —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!',
        reply_markup=keyboard_digest, parse_mode='Markdown')
    sent_message = currency_message_5
    await asyncio.sleep(60 * 5)
    await bot.delete_message(chat_id=sent_message.chat.id, message_id=sent_message.message_id)


async def menu_token(message: types.Message):
    await message.delete()
    video = types.InputFile("TestMir/photos/token_mir.mp4")
    await bot.send_video(message.chat.id, video=video)
    currency_message_5 = await bot.send_message(
        message.from_user.id, f'{message.from_user.first_name}, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∫—É—Ä—Å —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ!',
        reply_markup=keyboard_token, parse_mode='Markdown')
    sent_message = currency_message_5
    await asyncio.sleep(60 * 5)
    await bot.delete_message(chat_id=sent_message.chat.id, message_id=sent_message.message_id)


async def item4_handler(message: types.Message):
    await message.delete()
    video = types.InputFile("TestMir/photos/IMG_6775.MP4")
    await bot.send_video(message.chat.id, video=video)
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É.', reply_markup=button_case_sale)


async def item5_handler(message: types.Message):
    await message.delete()
    await message.answer("`–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å`", reply_markup=make_reset_questions_back_profile_button(), parse_mode='Markdown')
    await MyState.waiting_for_question.set()


# @dp.message_handler(lambda message: message.text == 'üîô –°–±—Ä–æ—Å–∏—Ç—å/–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.reset_state()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")


async def muvie(message: types.Message):
    await message.delete()
    photo = InputFile("TestMir/photos/mouvi_original.jpg")
    await bot.send_photo(message.chat.id, photo=photo)
    currency_message_5 = await bot.send_message(
        message.from_user.id, f'`üé¨ –ö–∏–Ω–æ –∏ —Å–µ—Ä–∏–∞–ª—ã –∏–∑ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ–±—è {message.from_user.first_name}`'
                              f'', reply_markup=keyboard_kino, parse_mode='Markdown')
    sent_message = currency_message_5
    await asyncio.sleep(60 * 5)
    await bot.delete_message(chat_id=sent_message.chat.id, message_id=sent_message.message_id)


async def auto_moto(message: types.Message):
    await message.delete()
    photo = InputFile("TestMir/photos/auto_moto.jpg")
    await bot.send_photo(message.chat.id, photo=photo)
    currency_message_5 = await bot.send_message(
        message.from_user.id,
        f'`üöõ –ì–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –º–∏—Ä–∞ –ê–≤—Ç–æ –∏ –ú–æ—Ç–æ –∏–∑ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ–±—è {message.from_user.first_name}`'
        f'', reply_markup=keyboard_auto_moto, parse_mode='Markdown')
    sent_message = currency_message_5
    await asyncio.sleep(60 * 5)
    await bot.delete_message(chat_id=sent_message.chat.id, message_id=sent_message.message_id)


async def job_but(message: types.Message):
    await message.delete()
    photo = InputFile("TestMir/photos/photo_2023-07-01_22-20-28.jpg")
    await bot.send_photo(message.chat.id, photo=photo)
    currency_message_5 = await bot.send_message(
        message.from_user.id,
        f'`üìå –†–∞–±–æ—Ç–∞ –∏ –í–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ–±—è {message.from_user.first_name}`'
        f'', reply_markup=keyboard_job, parse_mode='Markdown')
    sent_message = currency_message_5
    await asyncio.sleep(60 * 5)
    await bot.delete_message(chat_id=sent_message.chat.id, message_id=sent_message.message_id)


async def love(message: types.Message):
    await message.delete()
    photo = InputFile("TestMir/photos/Differences-Between-Love-And-Being-In-Love-Banner.jpg")
    await bot.send_photo(message.chat.id, photo=photo)
    currency_message_5 = await bot.send_message(
        message.from_user.id,
        f'`üë©‚ù§Ô∏èüë® –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –∏ –û—Ç–Ω–æ—à–µ–Ω–∏—è –∏–∑ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ–±—è {message.from_user.first_name}`'
        f'', reply_markup=keyboard_love, parse_mode='Markdown')
    sent_message = currency_message_5
    await asyncio.sleep(60 * 5)
    await bot.delete_message(chat_id=sent_message.chat.id, message_id=sent_message.message_id)


async def beautiful(message: types.Message):
    await message.delete()
    photo = InputFile("TestMir/photos/beautiful.jpg")
    await bot.send_photo(message.chat.id, photo=photo)
    currency_message_5 = await bot.send_message(
        message.from_user.id, f'`üíÖüèº–ö—Ä–∞—Å–æ—Ç–∞ –∏ —É—Ö–æ–¥ –∏–∑ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ–±—è {message.from_user.first_name}`'
                              f'', reply_markup=keyboard_beautiful, parse_mode='Markdown')
    sent_message = currency_message_5
    await asyncio.sleep(60 * 5)
    await bot.delete_message(chat_id=sent_message.chat.id, message_id=sent_message.message_id)


async def style(message: types.Message):
    await message.delete()
    photo = InputFile("TestMir/photos/sop1.jpg")
    await bot.send_photo(message.chat.id, photo=photo)
    currency_message_5 = await bot.send_message(
        message.from_user.id, f'`üëó–ú–æ–¥–∞ –∏ –°—Ç–∏–ª—å –∏–∑ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ–±—è {message.from_user.first_name}`'
                              f'', reply_markup=keyboard_style, parse_mode='Markdown')
    sent_message = currency_message_5
    await asyncio.sleep(60 * 5)
    await bot.delete_message(chat_id=sent_message.chat.id, message_id=sent_message.message_id)


async def go_back(message: types.Message):
    keyboard_98 = make_keyboard_98()
    await bot.send_message(
        message.from_user.id, f'`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ`', reply_markup=keyboard_chat,
        parse_mode='Markdown'
    )
    address = '–õ—É—á—à–µ–µ –¥–ª—è –≤–∞—Å —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞ ‚úÖ'
    await bot.send_message(message.from_user.id, address, reply_markup=keyboard_98)


async def button_dones(message: types.Message):
    photos = [InputFile('TestMir/photos/chek_sberbank_online.jpg'),
              InputFile('TestMir/photos/chek.png'), InputFile('TestMir/photos/–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2023-07-11 050022.png')]
    media = MediaGroup()

    for photo in photos:
        media.attach_photo(photo)
    sent_messages = await bot.send_media_group(message.from_user.id, media=media)
    currency_message_7 = await bot.send_message(message.from_user.id,
                                                f'–ü—Ä–∏–º–µ—Ä —á–µ–∫–æ–≤ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.\n\n`{message.from_user.first_name}, —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ —Å –æ–ø–ª–∞—Ç–æ–π'
                                                f' –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ —á–µ–∫ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º, –∫–æ—Ç–æ—Ä—Ä—ã–π –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.\n\n'
                                                f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–∞—à —á–∞—Ç –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤ –Ω–∞—à —á–∞—Ç-–±–æ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ '
                                                f'–Ω–∞ –∫–Ω–æ–ø–∫—É` "–ó–∞–≥—Ä—É–∑–∏—Ç—å" `–ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –Ω–∞ —Å–≤–æ–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ '
                                                f'–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ. –ü–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ`',
                                                parse_mode='Markdown', reply_markup=keyboard_chat_foto)
    currency_message_8 = await bot.send_message(message.from_user.id,
                                                f'–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è, {message.from_user.first_name}!',
                                                parse_mode='Markdown', reply_markup=make_reset_questions_back_menu_button())
    await asyncio.sleep(60 * 5)  # –∑–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
    for msg in sent_messages:
        await bot.delete_message(chat_id=msg.chat.id, message_id=msg.message_id)
    sent_messages_del = [currency_message_7, currency_message_8]
    for msg_two in sent_messages_del:
        await bot.delete_message(chat_id=msg_two.chat.id, message_id=msg_two.message_id)


async def delete_message(message: types.Message):
    await message.delete()


async def question_about_benefits_and_support(query: types.CallbackQuery):
    await query.message.delete()
    await query.message.answer("`–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å`", reply_markup=keyboard_reset_back, parse_mode='Markdown')
    await MyState.waiting_for_question.set()


async def top_coins_handler(query: types.CallbackQuery):
    await blockchaine_command_handler(query.message)
    await query.message.delete()


async def download_command_handler(message: types.Message):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ waiting_for_photo
    await DownloadPhotoState.waiting_for_photo.set()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await message.answer("–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ, –ø—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ —Å—é–¥–∞.")


## ================================= —Å–±—Ä–æ—Å –∏ –≤—ã–±–æ—Ä =========================================


async def reset_mode(message: types.Message):
    user_id = message.from_user.id
    user_modes.pop(user_id, None)
    await send_reset(message)


async def send_reset(message: types.Message):
    # photo = InputFile("tgbot3chat/images/ChatGPT.jpg")
    # await bot.send_photo(message.chat.id, photo=photo)
    await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞:", reply_markup=markup_Chat_gpt)

## ================================= end —Å–±—Ä–æ—Å –∏ –≤—ã–±–æ—Ä =========================================


## ================================= –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–º–∞ =========================================


user_modes = {}


@dp.callback_query_handler(lambda c: c.data in ['chatgpt_on', 'chatgpt_off'])
async def process_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_modes[user_id] = callback_query.data

    if user_modes[user_id] == 'chatgpt_on':
        chatgpt_on = "‚úÖ"
        chatgpt_off = ""
    elif user_modes[user_id] == 'chatgpt_off':
        chatgpt_on = ""
        chatgpt_off = "‚úÖ"
    else:
        chatgpt_on = ""
        chatgpt_off = ""

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    markup_Chat_gpt = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton(f"–í–∫–ª—é—á–∏—Ç—å {chatgpt_on}", callback_data='chatgpt_on')
    item2 = types.InlineKeyboardButton(f"–í—ã–∫–ª—é—á–∏—Ç—å {chatgpt_off}", callback_data='chatgpt_off')
    markup_Chat_gpt.add(item1, item2)

    await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=markup_Chat_gpt)
    await bot.answer_callback_query(callback_query.id)

## ================================= end –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–º–∞ =========================================

# ============================= status =============================


async def send_status(message: types.Message):
    user_id = message.from_user.id
    mode = user_modes.get(user_id)
    if mode is None:
        await bot.send_message(user_id, "–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã.")
    elif mode == "chatgpt_on":
        markup_Chat_gpt = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton(f"–í–∫–ª—é—á–∏—Ç—å ‚úÖ", callback_data='chatgpt_on')
        item2 = types.InlineKeyboardButton(f"–í—ã–∫–ª—é—á–∏—Ç—å", callback_data='chatgpt_off')
        markup_Chat_gpt.add(item1, item2)
        await bot.send_message(user_id, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç GPT –≤–∫–ª—é—á–µ–Ω", reply_markup=markup_Chat_gpt)
    elif mode == "chatgpt_off":
        markup_Chat_gpt = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton(f"–í–∫–ª—é—á–∏—Ç—å", callback_data='chatgpt_on')
        item2 = types.InlineKeyboardButton(f"–í—ã–∫–ª—é—á–∏—Ç—å ‚úÖ", callback_data='chatgpt_off')
        markup_Chat_gpt.add(item1, item2)
        await bot.send_message(user_id, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç GPT –æ—Ç–∫–ª—é—á–µ–Ω", reply_markup=markup_Chat_gpt)


async def send_status_command(message: types.Message):
    await send_status(message)

# ============================= end status ===========================


dp.register_message_handler(reset_mode, commands=['reset'])
dp.register_message_handler(reset_mode, lambda message: message.text == '–†–µ–∂–∏–º')
dp.register_message_handler(send_status_command, lambda message: message.text == '–°—Ç–∞—Ç—É—Å')


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start'])
    dp.register_message_handler(handle_profile, lambda message: message.text == '–ü—Ä–æ—Ñ–∏–ª—å')
    dp.register_message_handler(settings_phone_email, lambda message: message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    dp.register_callback_query_handler(process_phone_button_three, lambda callback_query: callback_query.data == 'call_update')
    dp.register_callback_query_handler(process_phone_button_email, lambda callback_query: callback_query.data == 'add_email')
    dp.register_message_handler(set_greeting, lambda message: message.text == '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ')
    dp.register_message_handler(process_greeting_step, state=GreetingState.SettingGreeting)
    dp.register_message_handler(link_to_update, lambda message: message.text == '–°—Å—ã–ª–∫–∞')
    dp.register_message_handler(process_link_to_update, state=UpdateLinkState.SettingLink)
    dp.register_message_handler(set_call_to_action, lambda message: message.text == '–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é')
    dp.register_message_handler(process_call_to_action_step, state=CallToActionState.SettingCallToAction)
    dp.register_message_handler(item1_handler, lambda message: message.text == 'üîìOpen')
    dp.register_message_handler(item2_handler, lambda message: message.text == 'üåéÔ∏èLocation')
    dp.register_message_handler(item3_handler, lambda message: message.text == '–ú–∞–≥–∞–∑–∏–Ω')
    dp.register_message_handler(item6_handler, lambda message: message.text == 'Menu üõé')
    dp.register_message_handler(menu_support, lambda message: message.text == '–õ—å–≥–æ—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
    dp.register_message_handler(menu_together, lambda message: message.text == '–î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤')
    dp.register_message_handler(menu_runet, lambda message: message.text == '–ì–æ—Ä—è—á–∞—è –¥–µ—Å—è—Ç–∫–∞ –†—É–Ω–µ—Ç–∞!')
    dp.register_message_handler(commands_gpt, lambda message: message.text == 'ChatGPT 3.5 Turbo')
    dp.register_message_handler(menu_digest, lambda message: message.text == "User's Digest")
    dp.register_message_handler(menu_token, lambda message: message.text == '–ö—É—Ä—Å—ã —Ç–æ–∫–µ–Ω–æ–≤ –ú–ò–†–∞')
    dp.register_message_handler(item4_handler, lambda message: message.text == '–ö–∞–Ω–∞–ª—ã')
    dp.register_message_handler(item5_handler, lambda message: message.text == '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
    dp.register_message_handler(muvie, lambda message: message.text == '–ö–∏–Ω–æ –∏ —Å–µ—Ä–∏–∞–ª—ã')
    dp.register_message_handler(auto_moto, lambda message: message.text == '–ê–≤—Ç–æ, –ú–æ—Ç–æ')
    dp.register_message_handler(job_but, lambda message: message.text == '–†–∞–±–æ—Ç–∞ –∏ –í–∞–∫–∞–Ω—Å–∏–∏')
    dp.register_message_handler(love, lambda message: message.text == '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –∏ –û—Ç–Ω–æ—à–µ–Ω–∏—è')
    dp.register_message_handler(beautiful, lambda message: message.text == '–ö—Ä–∞—Å–æ—Ç–∞ –∏ —É—Ö–æ–¥')
    dp.register_message_handler(style, lambda message: message.text == '–ú–æ–¥–∞ –∏ –°—Ç–∏–ª—å')
    dp.register_message_handler(go_back, lambda message: message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
    dp.register_message_handler(item6_handler, lambda message: message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è')
    dp.register_message_handler(button_dones, lambda message: message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')
    dp.register_callback_query_handler(download_command_handler, lambda c: c.data == 'download')
    dp.register_message_handler(cancel_handler, lambda message: message.text == '‚ùå –°–±—Ä–æ—Å–∏—Ç—å', state='*')
    dp.register_callback_query_handler(question_about_benefits_and_support, lambda query: query.data == 'top_question')
    dp.register_message_handler(handle_profile, lambda message: message.text == 'üîô Back')
    dp.register_callback_query_handler(top_coins_handler, lambda query: query.data == 'top_coins')
    dp.register_callback_query_handler(handle_show_category, startswith_show_category)
    dp.register_message_handler(on_chat_member_join_start, content_types=types.ContentType.NEW_CHAT_MEMBERS)
    dp.register_message_handler(handle_location, content_types=types.ContentType.LOCATION)




user_contexts = {}


@dp.message_handler(lambda message: user_modes.get(message.from_user.id) == 'chatgpt_on')
async def send(message: types.Message):
    user = await get_user_data(message.from_user.id)
    user_id = message.from_user.id
    mode = user_modes.get(user_id)
    if message.text.lower() == "/res":
        user_contexts.pop(user_id, None)
        await message.answer("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")
        return

    if mode == 'chatgpt_on':

        if user_id not in user_contexts:
            user_contexts[user_id] = [{"role": "system", "content": "You are a helpful assistant."}]

        user_contexts[user_id].append({"role": "user", "content": message.text})

        if user[2] == 'None' and user[1] > 0:
            processing_message = await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            try:
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo-0613",
                    messages=user_contexts[user_id],
                    temperature=0.5,
                    max_tokens=1024,
                )
            except openai.error.InvalidRequestError:
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –≤–∞—à –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤, —á–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ. "
                                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–±—Ä–æ—Å—å—Ç–µ /res –∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
                return
            except openai.error.APIError as e:
                await message.answer(f'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}.\n'
                                     f'–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')
                return
            except openai.error.RateLimitError:
                await message.answer(f'–ü—Ä–µ–≤—ã—à–µ–ª –ª–∏–º–∏—Ç. '
                                     f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.')
                return

            except openai.error.ServiceUnavailableError:
                await message.answer(f'–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É. '
                                     f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–±—Ä–æ—Å—å—Ç–µ /res.')
                return

            await bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)
            await message.answer(response['choices'][0]['message']['content'])
            user_contexts[user_id].append(
                {"role": "assistant", "content": response['choices'][0]['message']['content']})

            new_requests_count = user[1] - 1
            db.update_available_requests(user[0], new_requests_count)

        elif user[2] != 'None':
            subscription_date = datetime.strptime(user[2], '%Y-%m-%d %H:%M:%S')

            if (datetime.now() - subscription_date).days >= 30:
                db.update_available_requests(user[0], 0)
                db.update_subscription_date(user[0], 'None')
                user_contexts.pop(user_id, None)
                await bot.send_message(message.from_user.id, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –û—Ñ–æ—Ä–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—Å–∫—É.",
                                       reply_markup=button_done_gpt_turbo)
                return
            else:
                if message.text.lower() == "/res":
                    user_contexts.pop(user_id, None)
                    await message.answer("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")
                    return

                processing_message = await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
                try:
                    response = openai.ChatCompletion.create(
                        model="gpt-3.5-turbo-0613",
                        messages=user_contexts[user_id],
                        temperature=0.5,
                        max_tokens=1024,
                    )
                except openai.error.InvalidRequestError:
                    await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –≤–∞—à –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤, —á–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ. "
                                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–±—Ä–æ—Å—å—Ç–µ /res –∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
                    return

                except openai.error.APIError as e:
                    await message.answer(f'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}.\n'
                                         f'–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')
                    return

                except openai.error.RateLimitError:
                    await message.answer(f'–ü—Ä–µ–≤—ã—à–µ–ª –ª–∏–º–∏—Ç. '
                                         f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.')
                    return

                except openai.error.ServiceUnavailableError:
                    await message.answer(f'–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É. '
                                         f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–±—Ä–æ—Å—å—Ç–µ /res.')
                    return

                await bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)

                await message.answer(response['choices'][0]['message']['content'])
                user_contexts[user_id].append(
                    {"role": "assistant", "content": response['choices'][0]['message']['content']})

        else:
            await bot.send_message(message.from_user.id, "–í–∞—à –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –û—Ñ–æ—Ä–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—Å–∫—É.",
                                   reply_markup=button_done_gpt_turbo)




