# import os
# import openai
# from aiogram.types import InputFile, ContentType
#
# from create_bot import dp, bot, YOOKassa
# from aiogram import types, Dispatcher
# import datetime
#
# from data_base import sqlite_db
# from handlers.client import item3_handler, item6_handler
# from keyboards.client_kb import button_done, button_case_menu
# from keyboards.gpt_kb import markup_Chat_gpt, button_done_gpt_turbo
# from data_base.db_gpt_chat import Database
# import config
#
#
# db = Database(config.db_path)
# db.create_users_table()
#
# openai.api_key = os.getenv('TOKEN_AI')
#
#
# async def get_user_data(user_id):
#     user = db.get_user(user_id)
#     if not user:
#         db.add_new_user(user_id)
#         user = db.get_user(user_id)
#     return user
#
#
# counter = 10
#
#
# async def commands_gpt(message: types.Message):
#     user = await get_user_data(message.from_user.id)
#     await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!\n\n'
#                                                  f'–≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã /reset')
#     if user[2] == 'None':
#         if user[1] <= 0:
#             await bot.send_message(message.from_user.id, "–í–∞—à –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –û—Ñ–æ—Ä–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—Å–∫—É.",
#                                    reply_markup=button_done_gpt_turbo)
#         else:
#             await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç! –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {user[1]} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.')
#
#
# ## ================================= —Å–±—Ä–æ—Å –∏ –≤—ã–±–æ—Ä =========================================
#
#
# async def reset_mode(message: types.Message):
#     user_id = message.from_user.id
#     user_modes.pop(user_id, None)
#     await send_reset(message)
#
#
# async def send_reset(message: types.Message):
#     # photo = InputFile("tgbot3chat/images/ChatGPT.jpg")
#     # await bot.send_photo(message.chat.id, photo=photo)
#     await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞:", reply_markup=markup_Chat_gpt)
#
# ## ================================= end —Å–±—Ä–æ—Å –∏ –≤—ã–±–æ—Ä =========================================
#
#
# ## ================================= –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–º–∞ =========================================
#
#
# user_modes = {}
#
#
# @dp.callback_query_handler(lambda c: c.data in ['chatgpt_on', 'chatgpt_off'])
# async def process_callback(callback_query: types.CallbackQuery):
#     user_id = callback_query.from_user.id
#     user_modes[user_id] = callback_query.data
#
#     if user_modes[user_id] == 'chatgpt_on':
#         chatgpt_on = "‚úÖ"
#         chatgpt_off = ""
#     elif user_modes[user_id] == 'chatgpt_off':
#         chatgpt_on = ""
#         chatgpt_off = "‚úÖ"
#     else:
#         chatgpt_on = ""
#         chatgpt_off = ""
#
#     # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
#     markup_Chat_gpt = types.InlineKeyboardMarkup(row_width=2)
#     item1 = types.InlineKeyboardButton(f"–í–∫–ª—é—á–∏—Ç—å {chatgpt_on}", callback_data='chatgpt_on')
#     item2 = types.InlineKeyboardButton(f"–í—ã–∫–ª—é—á–∏—Ç—å {chatgpt_off}", callback_data='chatgpt_off')
#     markup_Chat_gpt.add(item1, item2)
#
#     await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=markup_Chat_gpt)
#     await bot.answer_callback_query(callback_query.id)
#
# ## ================================= end –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–º–∞ =========================================
#
# # ============================= status =============================
#
#
# async def send_status(message: types.Message):
#     user_id = message.from_user.id
#     mode = user_modes.get(user_id)
#     if mode is None:
#         await bot.send_message(user_id, "–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã.")
#     elif mode == "chatgpt_on":
#         markup_Chat_gpt = types.InlineKeyboardMarkup(row_width=2)
#         item1 = types.InlineKeyboardButton(f"–í–∫–ª—é—á–∏—Ç—å ‚úÖ", callback_data='chatgpt_on')
#         item2 = types.InlineKeyboardButton(f"–í—ã–∫–ª—é—á–∏—Ç—å", callback_data='chatgpt_off')
#         markup_Chat_gpt.add(item1, item2)
#         await bot.send_message(user_id, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç GPT –≤–∫–ª—é—á–µ–Ω", reply_markup=markup_Chat_gpt)
#     elif mode == "chatgpt_off":
#         markup_Chat_gpt = types.InlineKeyboardMarkup(row_width=2)
#         item1 = types.InlineKeyboardButton(f"–í–∫–ª—é—á–∏—Ç—å", callback_data='chatgpt_on')
#         item2 = types.InlineKeyboardButton(f"–í—ã–∫–ª—é—á–∏—Ç—å ‚úÖ", callback_data='chatgpt_off')
#         markup_Chat_gpt.add(item1, item2)
#         await bot.send_message(user_id, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç GPT –æ—Ç–∫–ª—é—á–µ–Ω", reply_markup=markup_Chat_gpt)
#
#
# async def send_status_command(message: types.Message):
#     await send_status(message)
#
# # ============================= end status ===========================
#
# # dp.register_message_handler(commands_gpt, commands=['gpt'])
# dp.register_message_handler(reset_mode, commands=['reset'])
# dp.register_message_handler(send_reset, commands=['str'])
# dp.register_message_handler(send_status_command, commands=['status'])
#
#
# def register_handler_chat_gpt_turbo(dp: Dispatcher):
#     dp.register_message_handler(item3_handler, lambda message: message.text == '–ú–∞–≥–∞–∑–∏–Ω')
#     dp.register_message_handler(item6_handler, lambda message: message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
    # dp.register_callback_query_handler(process_callback, lambda c: c.data in ['chatgpt_on', 'chatgpt_off'])


# user_contexts = {}
#
#
# @dp.message_handler(lambda message: user_modes.get(message.from_user.id) == 'chatgpt_on')
# async def send(message: types.Message):
#     user = await get_user_data(message.from_user.id)
#     user_id = message.from_user.id
#     mode = user_modes.get(user_id)
#     if message.text.lower() == "/res":
#         user_contexts.pop(user_id, None)
#         await message.answer("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")
#         return
#
#     if mode == 'chatgpt_on':
#
#         if user_id not in user_contexts:
#             user_contexts[user_id] = [{"role": "system", "content": "You are a helpful assistant."}]
#
#         user_contexts[user_id].append({"role": "user", "content": message.text})
#
#         if user[2] == 'None' and user[1] > 0:
#             processing_message = await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
#             try:
#                 response = openai.ChatCompletion.create(
#                     model="gpt-3.5-turbo-0613",
#                     messages=user_contexts[user_id],
#                     temperature=0.5,
#                     max_tokens=1024,
#                 )
#             except openai.error.InvalidRequestError:
#                 await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –≤–∞—à –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤, —á–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ. "
#                                      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–±—Ä–æ—Å—å—Ç–µ /res –∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
#                 return
#             except openai.error.APIError as e:
#                 await message.answer(f'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}.\n'
#                                      f'–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')
#                 return
#             except openai.error.RateLimitError:
#                 await message.answer(f'–ü—Ä–µ–≤—ã—à–µ–ª –ª–∏–º–∏—Ç. '
#                                      f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.')
#                 return
#
#             except openai.error.ServiceUnavailableError:
#                 await message.answer(f'–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É. '
#                                      f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–±—Ä–æ—Å—å—Ç–µ /res.')
#                 return
#
#             await bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)
#             await message.answer(response['choices'][0]['message']['content'])
#             user_contexts[user_id].append(
#                 {"role": "assistant", "content": response['choices'][0]['message']['content']})
#
#             new_requests_count = user[1] - 1
#             db.update_available_requests(user[0], new_requests_count)
#
#         elif user[2] != 'None':
#             subscription_date = datetime.datetime.strptime(user[2], '%Y-%m-%d %H:%M:%S')
#
#             if (datetime.datetime.now() - subscription_date).days >= 30:
#                 db.update_available_requests(user[0], 0)
#                 db.update_subscription_date(user[0], 'None')
#                 user_contexts.pop(user_id, None)
#                 await bot.send_message(message.from_user.id, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –û—Ñ–æ—Ä–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—Å–∫—É.",
#                                        reply_markup=button_done_gpt_turbo)
#                 return
#             else:
#                 if message.text.lower() == "/res":
#                     user_contexts.pop(user_id, None)
#                     await message.answer("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")
#                     return
#
#                 processing_message = await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
#                 try:
#                     response = openai.ChatCompletion.create(
#                         model="gpt-3.5-turbo-0613",
#                         messages=user_contexts[user_id],
#                         temperature=0.5,
#                         max_tokens=1024,
#                     )
#                 except openai.error.InvalidRequestError:
#                     await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –≤–∞—à –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤, —á–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ. "
#                                          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–±—Ä–æ—Å—å—Ç–µ /res –∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
#                     return
#
#                 except openai.error.APIError as e:
#                     await message.answer(f'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}.\n'
#                                          f'–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')
#                     return
#
#                 except openai.error.RateLimitError:
#                     await message.answer(f'–ü—Ä–µ–≤—ã—à–µ–ª –ª–∏–º–∏—Ç. '
#                                          f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.')
#                     return
#
#                 except openai.error.ServiceUnavailableError:
#                     await message.answer(f'–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É. '
#                                          f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–±—Ä–æ—Å—å—Ç–µ /res.')
#                     return
#
#                 await bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)
#
#                 await message.answer(response['choices'][0]['message']['content'])
#                 user_contexts[user_id].append(
#                     {"role": "assistant", "content": response['choices'][0]['message']['content']})
#
#         else:
#             await bot.send_message(message.from_user.id, "–í–∞—à –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –û—Ñ–æ—Ä–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—Å–∫—É.",
#                                    reply_markup=button_done_gpt_turbo)




