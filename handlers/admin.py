import aiogram
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from data_base import sqlite_db
from data_base.db_gpt_chat import Database
from data_base.sqlite_db import sql_get_user_purchases, download_purchases, download_register_users, download_mir_shop, \
    load_user_pay, load_user_shop, get_discount, send_new_product_to_subscribers
from handlers.client import db
from handlers.email_success_pay import send_email_yandex_success_pay, get_user_email
from handlers.other import SomeState, DownloadPhotoState, MyState
from keyboards import admin_kb
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ContentType
from create_bot import dp, bot, YOOKassa, YOUR_CHAT_ID
from aiogram import Dispatcher, types
from datetime import datetime

from keyboards.admin_kb import keyboard_base_db, button_case_admin
from keyboards.client_kb import button_category, button_text_more_link
import os
import config


moderator_id = YOUR_CHAT_ID  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ID —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞


ID = 0


class FSMAdmin(StatesGroup):
    photo = State()
    category = State()
    name = State()
    description = State()
    price = State()
    total = State()


# –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
async def make_changes_command(message: types.Message):
    global ID
    ID = message.from_user.id
    await bot.send_message(message.from_user.id, '*–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –æ—Ç–∫—Ä—ã—Ç*. üì≤üíªüõ†'
                                                 '', reply_markup=admin_kb.button_case_admin, parse_mode='Markdown')
    await message.delete()


# # **************************** –ó–ê–ì–†–£–ó–ö–ê –¢–û–í–ê–†–ê ****************************

async def cm_start(message: types.Message):
    if message.from_user.id == ID:
        await FSMAdmin.photo.set()
        await message.answer('–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ')


async def cancel_handler(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        current_state = await state.get_state()
        if current_state is None:
            return
        await state.finish()
        await message.reply('OK')


async def load_photo(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as date:
            date['photo'] = message.photo[0].file_id
        await FSMAdmin.next()
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', reply_markup=button_category())


async def load_category(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as date:
            date['category'] = message.text
        await FSMAdmin.next()
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', reply_markup=button_case_admin)


async def load_name(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as date:
            date['name'] = message.text
        await FSMAdmin.next()
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:')


async def load_description(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as date:
            date['description'] = message.text
        await FSMAdmin.next()
        await message.reply('–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ RUB')


async def load_price(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as date:
            date['price'] = float(message.text)
        await FSMAdmin.next()
        await message.reply('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:')


async def load_total(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as date:
            date['total'] = int(message.text)

        await message.reply('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω')
        await sqlite_db.sql_add_command(state)
        await state.finish()
        await send_new_product_to_subscribers()
        load_user_shop()


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def process_pay(message: types.Message):
    user_id = message.from_user.id
    category = message.successful_payment.invoice_payload.split('_')[1]
    item_name = message.successful_payment.invoice_payload.split('_')[2]
    description = message.successful_payment.invoice_payload.split('_')[3]
    total = message.successful_payment.invoice_payload.split('_')[4]
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username
    purchase_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    subscription_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    price = message.successful_payment.total_amount / 100
    cursor_user_purchases = sqlite_db.cursor_user_purchases
    cursor_user_purchases.execute('INSERT INTO purchases VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
                                  (user_id, category, item_name, description, first_name, last_name, username, purchase_date,
                                   subscription_date, price, total))

    sqlite_db.base_user_purchases.commit()
    if item_name == "ChatGPT":
        db.update_subscription_date(user_id, subscription_date)
        database = Database(config.db_path)
        database.load_data_to_google_gpt()
    load_user_pay()

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ
    product_data = sqlite_db.get_product_data(item_name)
    if product_data:
        current_total = product_data[5]  # –ò–Ω–¥–µ–∫—Å 5 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±—Ü—É `total`
        new_total = current_total - float(total)
    else:
        print('errore')

    sqlite_db.update_product_data(item_name, new_total)
    load_user_shop()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–π –ø–æ–∫—É–ø–∫–µ
    await bot.send_message(moderator_id, f'üí≥ *–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!*\nüë§ ID –∫–ª–∏–µ–Ω—Ç–∞: {user_id}\nüßëüèª‚Äçü¶∞üßîüèª‚Äç‚ôÇÔ∏è –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {first_name} {last_name}\n'
                                         f'üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞: {category}\n'
                                         f'üì¶ –¢–æ–≤–∞—Ä: {item_name}\nüåê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n'
                                         f'üïë –î–∞—Ç–∞: {purchase_date}\n–¶–µ–Ω–∞: {price}')

    await bot.send_message(message.from_user.id, f'–¢–æ–≤–∞—Ä {item_name} –∫—É–ø–ª–µ–Ω, —Å–ø–∞—Å–∏–±–æ!')


@dp.callback_query_handler(lambda call: call.data.startswith('buy'))
async def process_buy(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    item_name, item_total = call.data.split()[1:4]
    item_total = float(item_total)
    item_data = sqlite_db.get_product_data(item_name)

    category = item_data[1] if item_data else ''
    title = f"{category} - {item_data[2]}" if item_data else ''
    description = item_data[3] if item_data else ''

    discount = get_discount(call.from_user.id)

    await bot.send_invoice(
        chat_id=call.from_user.id,
        title=title,
        description=description,
        payload=f'buy_{item_data[1]}_{item_name}_{item_data[3]}_{item_total}',
        provider_token=YOOKassa,
        currency='RUB',
        start_parameter='test_bot',
        prices=[{"label": "–†—É–±", "amount": int((item_data[4] - (item_data[4] * discount)) * 100)}] if item_data else []
    )
    item_data_fore = round((item_data[4] - (item_data[4] * discount)) * 100/100, 2)
    purchase_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    # –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_id = call.from_user.id
    email_address = get_user_email(user_id)

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –æ –ø–æ–∫—É–ø–∫–µ –Ω–∞ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await send_email_yandex_success_pay(email_address, item_name, item_data_fore, item_total, purchase_date, discount)


async def file_db_base_download(message: types.Message):
    await message.delete()
    await bot.send_message(message.from_user.id, '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, '
                                                 '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö '
                                                 '—Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏.', reply_markup=keyboard_base_db)


async def back_moderator(message: types.Message):
    await message.delete()
    await bot.send_message(message.from_user.id, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', reply_markup=admin_kb.button_case_admin)


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
# @dp.message_handler(commands=['set_moderator'])
async def set_moderator_id(message: types.Message):
    global moderator_id
    moderator_id = message.from_user.id
    await message.reply(f"ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {moderator_id}")


# # –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–∏—Ç—å
# # @dp.callback_query_handlers(lambda x: x.data and x.data.startswith('del '))
async def del_callback_run(callback_query: types.CallbackQuery):
    await sqlite_db.sql_delete_command(callback_query.data.replace('del ', ''))
    await callback_query.answer(text=f'{callback_query.data.replace("del ", "")} —É–¥–∞–ª–µ–Ω–∞', show_alert=True)


# # –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–∏—Ç—å
# # @dp.message_handler(commands='–£–¥–∞–ª–∏—Ç—å')
async def delete_item(message: types.Message):
    if message.from_user.id == ID:
        read = await sqlite_db.sql_read2()
        for ret in read:
            await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[2]}\n–¶–µ–Ω–∞: {ret[3]} RUB\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {ret[-1]}')
            await bot.send_message(message.from_user.id, text='^^^', reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å {ret[1]}', callback_data=f'del {ret[1]}')
            ))


# ================================ –í—ã–∑–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –≤ —á–∞—Ç ================================
async def chat_moderator_text(message: types.Message):
    await message.delete()
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id == moderator_id:  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        await bot.send_message(
            message.from_user.id, '*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è '
                                  '—Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç*.', parse_mode='Markdown', reply_markup=button_text_more_link())
    else:
        await bot.send_message(message.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–∑–æ–≤–∞ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')


# ================================ –ø–æ–∏—Å–∫ –ø–æ–∫—É–ø–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ id ================================
async def pay_command(message: types.Message):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞:")
    await SomeState.waiting_for_client_id.set()


# @dp.message_handler(state=SomeState.waiting_for_client_id)
async def process_client_id(message: types.Message, state: FSMContext):
    client_id = message.text
    # Retrieve user purchases data from the database
    user_purchases = sql_get_user_purchases(client_id)
    if user_purchases:
        # Display the purchase data
        for purchase in user_purchases:
            # Extract the relevant information from the purchase tuple
            user_id, item_name, description, first_name, last_name, username, purchase_date, price, total = purchase
            purchase_info = (f'üí≥ *–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!*\nüë§ ID –∫–ª–∏–µ–Ω—Ç–∞: {user_id}\nüßëüèª‚Äçü¶∞üßîüèª‚Äç‚ôÇÔ∏è –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {first_name} {last_name}\n'
                             f'üì¶ –¢–æ–≤–∞—Ä: {item_name} {description}\nüåê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n'
                             f'üïë –î–∞—Ç–∞: {purchase_date}\n–¶–µ–Ω–∞: {price}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total}')
            await message.reply(purchase_info, parse_mode='Markdown')
    else:
        await message.reply("–ö–ª–∏–µ–Ω—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    # Reset the state
    await state.finish()


# ================================ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ excel —Ñ–∞–π–ª–æ–≤ ================================
async def handle_purchases_download(message: types.Message):
    await message.reply('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö —Ç–æ–≤–∞—Ä')
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    download_purchases()
    current_datetime = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = f"pays-{current_datetime}.xlsx"
    with open(f'pays-{current_datetime}.xlsx', 'rb') as file:
        document = types.InputFile(file)
        document.metadata = {'filename': filename}
        await bot.send_document(message.chat.id, document=document)
    os.remove(filename)


async def handle_register_download(message: types.Message):
    await message.reply('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    download_register_users()
    current_datetime = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = f"users-register-{current_datetime}.xlsx"
    with open(f'users-register-{current_datetime}.xlsx', 'rb') as file:
        document = types.InputFile(file)
        document.metadata = {'filename': filename}
        await bot.send_document(message.chat.id, document=document)
    os.remove(filename)


async def handle_mir_shop_download(message: types.Message):
    await message.reply('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞–º')
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    download_mir_shop()
    current_datetime = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = f"MirShop-{current_datetime}.xlsx"
    with open(f'MirShop-{current_datetime}.xlsx', 'rb') as file:
        document = types.InputFile(file)
        document.metadata = {'filename': filename}
        await bot.send_document(message.chat.id, document=document)
    os.remove(filename)


def register_handlers_admin(dp: Dispatcher):
    dp.register_message_handler(make_changes_command, commands=['moderator'], is_chat_admin=True)
    dp.register_message_handler(cm_start, commands=['–ó–∞–≥—Ä—É–∑–∏—Ç—å'], state=None)
    dp.register_message_handler(chat_moderator_text, commands=['textchat'])
    dp.register_message_handler(delete_item, commands='–£–¥–∞–ª–∏—Ç—å')
    dp.register_callback_query_handler(del_callback_run, lambda x: x.data and x.data.startswith('del '))
    dp.register_message_handler(pay_command, lambda message: message.text == '–û–ø–ª–∞—Ç–∞')
    dp.register_message_handler(file_db_base_download, lambda message: message.text == 'FileBase')
    dp.register_message_handler(handle_purchases_download, lambda message: message.text == '–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞')
    dp.register_message_handler(handle_register_download, lambda message: message.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ')
    dp.register_message_handler(handle_mir_shop_download, lambda message: message.text == '–¢–æ–≤–∞—Ä—ã/–û—Å—Ç–∞—Ç–∫–∏')
    dp.register_message_handler(back_moderator, lambda message: message.text == 'üîô –ù–∞–∑–∞–¥')
    dp.register_message_handler(set_moderator_id, lambda message: message.text == 'üìúüåá Set Moderator')
    dp.register_message_handler(cancel_handler, state="*", commands='–æ—Ç–º–µ–Ω–∞')
    dp.register_message_handler(cancel_handler, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    dp.register_message_handler(load_photo, content_types=['photo'], state=FSMAdmin.photo)
    dp.register_message_handler(load_category, state=FSMAdmin.category)
    dp.register_message_handler(load_name, state=FSMAdmin.name)
    dp.register_message_handler(load_description, state=FSMAdmin.description)
    dp.register_message_handler(load_price, state=FSMAdmin.price)
    dp.register_message_handler(load_total, state=FSMAdmin.total)
    dp.register_message_handler(process_client_id, state=SomeState.waiting_for_client_id)


# =============== –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ ===============
# @dp.message_handler(content_types=types.ContentType.PHOTO)
@dp.message_handler(content_types=types.ContentType.PHOTO, state=DownloadPhotoState.waiting_for_photo)
async def handle_photo(message: types.Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file_id = photo.file_id
        file = await bot.get_file(file_id)
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä Telegram
        photo_path = f"photos/{file.file_path}"
        await bot.download_file(file.file_path, photo_path)
        # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photo_file = open(photo_path, 'rb')
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –µ–≥–æ –∏–º—è, id, –Ω–∏–∫–Ω–µ–π–º
        sender_name = message.from_user.full_name
        sender_id = message.from_user.id
        sender_username = message.from_user.username
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
        photo_caption = f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_name}\nüë§ ID: {sender_id}\nüåê –ù–∏–∫–Ω–µ–π–º: @{sender_username}"
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ø–æ–¥–ø–∏—Å—å—é
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
        if message.text != '‚ùå –°–±—Ä–æ—Å–∏—Ç—å':
            if sender_id != moderator_id:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
                await bot.send_photo(moderator_id, photo_file, caption=photo_caption)
                await message.reply("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. "
                                    "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä.")
                await state.finish()
            else:
                await message.reply("–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
                await state.finish()
    except aiogram.utils.exceptions.ChatIdIsEmpty:
        await message.reply("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.")
        await state.finish()


# =============== –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ ===============

@dp.message_handler(content_types=types.ContentType.TEXT, state=MyState.waiting_for_question)
async def process_question(message: types.Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        message_text = message.text
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sender_id = message.from_user.id
        sender_first_name = message.from_user.first_name
        sender_last_name = message.from_user.last_name
        sender_username = message.from_user.username
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
        caption = f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_first_name} {sender_last_name}\nüë§ ID: {sender_id}\nüåê –ù–∏–∫–Ω–µ–π–º: @{sender_username}\n\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"
        if message.text == '‚ùå –°–±—Ä–æ—Å–∏—Ç—å':
            await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            await state.finish()
            return

        if sender_id != moderator_id:
            await bot.send_message(moderator_id, text=caption)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç
            await bot.send_message(moderator_id, text=message_text)
            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
            await state.finish()
        else:
            await message.reply("–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
            await state.finish()
    except aiogram.utils.exceptions.ChatIdIsEmpty:
        await message.reply("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.")
        await state.finish()


@dp.pre_checkout_query_handler()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
