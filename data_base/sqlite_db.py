import sqlite3
import sqlite3 as sq
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from create_bot import bot, GOOGLE
import pandas as pd
from datetime import datetime
from google.oauth2 import service_account
import gspread

# ======================== —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ ========================


def sql_start():
    global base, cursor
    base = sq.connect('MirShop.db')
    cursor = base.cursor()
    if base:
        print('Shop Data base connected OK')
    base.execute('CREATE TABLE IF NOT EXISTS menu(img TEXT, category TEXT, name TEXT PRIMARY KEY, description TEXT, '
                 'price REAL, total REAL, added_date DATETIME DEFAULT CURRENT_TIMESTAMP)')
    base.commit()

    load_user_shop()


# –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
def get_last_product(cursor):
    last_product = cursor.execute('SELECT * FROM menu ORDER BY added_date DESC LIMIT 1').fetchone()
    return last_product


# —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
def get_subscribers(cursor_user_register):
    subscribers = cursor_user_register.execute('SELECT * FROM users WHERE newsletter = 1').fetchall()
    return subscribers


# –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö
async def send_new_product_to_subscribers():
    last_product = get_last_product(cursor)
    subscribers = get_subscribers(cursor_user_register)

    if last_product and subscribers:
        img, category, name, description, price, total, added_date = last_product

        # –°–æ–∑–¥–∞–Ω–∏–µ inline –æ—Ç–≤–µ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
        inline_message = f'üÜï –ù–æ–≤–∏–Ω–∫–∞ üÜï\nüì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\nüìú –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: {description}\nüí≥ –¶–µ–Ω–∞: {price} RUB\nüì∂ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total}'

        for user in subscribers:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ inline –æ—Ç–≤–µ—Ç–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
            await bot.send_photo(user[1], photo=img, caption=inline_message,
                                 reply_markup=InlineKeyboardMarkup().add(
                                     InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"buy {name} 1")))


# ======================== –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã ========================


def load_user_shop():
    conn = sqlite3.connect('MirShop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM menu')
    all_user_pay_shop = cursor.fetchall()

    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    credentials = service_account.Credentials.from_service_account_file('TestMir/my-project-bot-88845-fac16c8795e1.json',
                                                                        scopes=scope)
    client = gspread.authorize(credentials)
    spreadsheet = client.open_by_key(f'{GOOGLE}')
    worksheet = spreadsheet.get_worksheet(2)

    for user_pay_shop in all_user_pay_shop:
        data_values = [str(value) for value in user_pay_shop]
        item_name = data_values[2]
        item_total = data_values[5]

        # –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ —Å —Ç–µ–º –∂–µ —Ç–æ–≤–∞—Ä–æ–º
        existing_cell = worksheet.find(item_name)
        if existing_cell:
            row_offset = existing_cell.row  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å—å—é
            worksheet.update_cell(row_offset, 6, item_total)  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ total
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            worksheet.append_row(data_values)

    print('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É Google.')
    conn.commit()
    conn.close()

# ======================== —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä—ã —Å –Ω—É–ª–µ–≤—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º ========================


def delete_from_google_table(item_name):
    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    credentials = service_account.Credentials.from_service_account_file('TestMir/my-project-bot-88845-fac16c8795e1.json',
                                                                        scopes=scope)
    client = gspread.authorize(credentials)
    spreadsheet = client.open_by_key(f'{GOOGLE}')
    worksheet = spreadsheet.get_worksheet(2)

    existing_cell = worksheet.find(item_name)
    if existing_cell:
        row_offset = existing_cell.row
        worksheet.delete_row(row_offset)

    print('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Google.')


# ============================== –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É =============================
async def sql_add_command(state):
    async with state.proxy() as data:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = datetime.now()
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
        data_values = list(data.values()) + [current_time]
        cursor.execute('INSERT INTO menu VALUES (?, ?, ?, ?, ?, ?, ?)', data_values)
        base.commit()


# ================================= –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞  ==================================

async def sql_read(message, category):
    for ret in cursor.execute('SELECT * FROM menu WHERE category = ?', (category,)).fetchall():
        img = ret[0]
        category = ret[1]
        name = ret[2]
        description = ret[3]
        price = ret[4]
        total = ret[5]

        # –°–æ–∑–¥–∞–Ω–∏–µ inline –æ—Ç–≤–µ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
        inline_message = f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–¶–µ–Ω–∞: {price} RUB\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total}'

        # –û—Ç–ø—Ä–∞–≤–∫–∞ inline –æ—Ç–≤–µ—Ç–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
        await bot.send_photo(message.chat.id, photo=img, caption=inline_message,
                             reply_markup=InlineKeyboardMarkup().add(
                                 InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"buy {name} 1")))


# ============================== –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –µ—Å–ª–∏ –æ–Ω –ø—Ä–æ–¥–∞–Ω =============================

def update_product_data(item_name, new_total):
    if new_total > 0:
        cursor.execute('UPDATE menu SET total = ? WHERE name = ?', (new_total, item_name))
    else:
        cursor.execute('DELETE FROM menu WHERE name = ?', (item_name,))
        delete_from_google_table(item_name)  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Google
    base.commit()


# ============================== –≤—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É =============================

async def sql_read2():
    return cursor.execute('SELECT * FROM menu').fetchall()


# ============================== –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –∞–¥–º–∏–Ω–∫–µ =============================

async def sql_delete_command(data):
    cursor.execute('DELETE FROM menu WHERE name == ?', (data,))
    base.commit()


# ============================== –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ –ø—Ä–∏–º–µ–Ω–∏–º–∞ –≤ process_pay() =============================
def get_product_data(item_name):
    cursor.execute('SELECT * FROM menu WHERE name=?', (item_name,))
    return cursor.fetchone()


# =========================== –ö–Ω–æ–ø–∫–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∏—Ö =============================

async def show_categories(message):
    categories = cursor.execute('SELECT category, COUNT(*) FROM menu GROUP BY category').fetchall()
    keyboard = InlineKeyboardMarkup(row_width=2)
    for category, count in categories:
        keyboard.add(InlineKeyboardButton(f'{category} ({count})', callback_data=f'show_category {category}'))
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard)


# ========================== –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –≤ —Ñ–∞–π–ª excel ================================

def download_mir_shop():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    purchases = sql_get_all_mir_shop()
    print(purchases)  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    df = pd.DataFrame(purchases, columns=['img', 'category', 'name', 'description', 'price', 'total', 'added_date'])
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ Excel
    current_datetime = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = f"MirShop-{current_datetime}.xlsx"
    df.to_excel(filename, index=False)


def sql_get_all_mir_shop():
    return cursor.execute('SELECT * FROM menu').fetchall()

# =================== ****************************************** ==========================


# =================== ****************************************** ==========================


# =================== ****************************************** ==========================


# =================== ****************************************** ==========================


# =================== ****************************************** ==========================


# =================== —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ =========================

def register_start():
    global base_user_register, cursor_user_register
    base_user_register = sqlite3.connect('register_users.db', check_same_thread=False)
    cursor_user_register = base_user_register.cursor()

    if base_user_register:
        print('User Register Database connected successfully.')

    cursor_user_register.execute('''CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL UNIQUE,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        phone_number TEXT DEFAULT NULL,
        email_address TEXT DEFAULT NULL,
        purchase_date DATETIME,
        discount REAL DEFAULT 0,
        newsletter INTEGER DEFAULT 0,
        referrer_id INTEGER
        )''')

    cursor_user_register.execute('PRAGMA synchronous = OFF')


def update_newsletter_status(user_id: int, status: int):
    cursor_user_register.execute("UPDATE users SET newsletter = ? WHERE user_id = ?", (status, user_id))
    base_user_register.commit()


def get_newsletter_status(user_id: int) -> int:
    cursor_user_register.execute(
        """SELECT newsletter FROM users WHERE user_id = ?""",
        (user_id,)
    )
    result = cursor_user_register.fetchone()
    if result is not None:
        return result[0]
    return 0  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Ç–æ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–Ω –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è



# ======================== –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ google —Ç–∞–±–ª–∏—Ü—ã ========================


def load_data_to_google():
    conn = sqlite3.connect('register_users.db')
    cursor = conn.cursor()
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
    cursor.execute('SELECT * FROM users')
    all_user_pay_shop = cursor.fetchall()

    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    credentials = service_account.Credentials.from_service_account_file('TestMir/my-project-bot-88845-fac16c8795e1.json', scopes=scope)
    client = gspread.authorize(credentials)
    spreadsheet = client.open_by_key(f'{GOOGLE}')
    worksheet = spreadsheet.sheet1

    for user_pay_shop in all_user_pay_shop:
        data_values = [str(value) for value in user_pay_shop]
        user_id = data_values[1]
        phone_number = data_values[5]

        # –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ —Å —Ç–µ–º –∂–µ user_id
        existing_cell = worksheet.find(user_id)
        if existing_cell:
            row_offset = existing_cell.row  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å—å—é
            worksheet.update_cell(row_offset, 6, phone_number)  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ phone_number
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            worksheet.append_row(data_values)

    print('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É Google.')
    conn.commit()
    conn.close()


def load_data_to_google_email():
    conn = sqlite3.connect('register_users.db')
    cursor = conn.cursor()
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
    cursor.execute('SELECT * FROM users')
    all_user_pay_shop = cursor.fetchall()

    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    credentials = service_account.Credentials.from_service_account_file('TestMir/my-project-bot-88845-fac16c8795e1.json', scopes=scope)
    client = gspread.authorize(credentials)
    spreadsheet = client.open_by_key(f'{GOOGLE}')
    worksheet = spreadsheet.sheet1

    for user_pay_shop in all_user_pay_shop:
        data_values = [str(value) for value in user_pay_shop]
        user_id = data_values[1]
        email_address = data_values[6]

        # –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ —Å —Ç–µ–º –∂–µ user_id
        existing_cell = worksheet.find(user_id)
        if existing_cell:
            row_offset = existing_cell.row  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å—å—é
            worksheet.update_cell(row_offset, 7, email_address)  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ email_address
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            worksheet.append_row(data_values)

    print('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É Google.')
    conn.commit()
    conn.close()


def load_data_to_google_newsletterl():
    conn = sqlite3.connect('register_users.db')
    cursor = conn.cursor()
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
    cursor.execute('SELECT * FROM users')
    all_user_pay_shop = cursor.fetchall()

    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    credentials = service_account.Credentials.from_service_account_file('TestMir/my-project-bot-88845-fac16c8795e1.json', scopes=scope)
    client = gspread.authorize(credentials)
    spreadsheet = client.open_by_key(f'{GOOGLE}')
    worksheet = spreadsheet.sheet1

    for user_pay_shop in all_user_pay_shop:
        data_values = [str(value) for value in user_pay_shop]
        user_id = data_values[1]
        newsletter = data_values[9]

        # –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ —Å —Ç–µ–º –∂–µ user_id
        existing_cell = worksheet.find(user_id)
        if existing_cell:
            row_offset = existing_cell.row  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å—å—é
            worksheet.update_cell(row_offset, 10, newsletter)  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ newsletter
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            worksheet.append_row(data_values)

    print('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É Google.')
    conn.commit()
    conn.close()


def load_data_to_google_confirmation():
    conn = sqlite3.connect('register_users.db')
    cursor = conn.cursor()
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
    cursor.execute('SELECT * FROM users')
    all_user_pay_shop = cursor.fetchall()

    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    credentials = service_account.Credentials.from_service_account_file('TestMir/my-project-bot-88845-fac16c8795e1.json', scopes=scope)
    client = gspread.authorize(credentials)
    spreadsheet = client.open_by_key(f'{GOOGLE}')
    worksheet = spreadsheet.sheet1

    for user_pay_shop in all_user_pay_shop:
        data_values = [str(value) for value in user_pay_shop]
        user_id = data_values[1]
        newsletter = data_values[11]

        # –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ —Å —Ç–µ–º –∂–µ user_id
        existing_cell = worksheet.find(user_id)
        if existing_cell:
            row_offset = existing_cell.row  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å—å—é
            worksheet.update_cell(row_offset, 12, newsletter)  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ confirmation
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            worksheet.append_row(data_values)

    print('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É Google.')
    conn.commit()
    conn.close()


# ====================== –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–∏–º–∞ command_start() ======================
def user_exists(user_id):
    cursor_user_register.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    result = cursor_user_register.fetchall()
    return bool(len(result))


# ====================== —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ======================
def add_user(user_id, username, first_name, last_name, phone_number, email_address, purchase_date, discount, newsletter, referrer_id=None):
    if user_exists(user_id):
        update_user(user_id, username, referrer_id)
    else:
        with base_user_register:
            if referrer_id is not None:
                cursor_user_register.execute('INSERT INTO users (user_id, username, first_name, last_name, phone_number, email_address, purchase_date, discount, newsletter, referrer_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
                                             (user_id, username, first_name, last_name, phone_number, email_address, purchase_date, discount, newsletter,  referrer_id))
            else:
                cursor_user_register.execute('INSERT INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)',
                                             (user_id, username, first_name, last_name, ))
        base_user_register.commit()


def on_user_register(user_id, username, first_name, last_name, phone_number, email_address, purchase_date, discount, newsletter, referrer_id=None):
    register_start()
    if not user_exists(user_id):
        add_user(user_id, username, first_name, last_name, phone_number, email_address, purchase_date, discount, newsletter, referrer_id)
    else:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_user(user_id, username, first_name)


def update_user(user_id, username, referrer_id=None):
    if referrer_id is not None:
        cursor_user_register.execute('UPDATE users SET username = ?, referrer_id = ? WHERE user_id = ?',
                                     (username, referrer_id, user_id,))
    else:
        cursor_user_register.execute('UPDATE users SET username = ? WHERE user_id = ?',
                                     (username, user_id,))

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    referral_count = count_referals(user_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–∏–¥–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    if referral_count >= 5:
        discount = 0.15  # 15% —Å–∫–∏–¥–∫–∞
    elif referral_count >= 3:
        discount = 0.10  # 10% —Å–∫–∏–¥–∫–∞
    elif referral_count >= 1:
        discount = 0.05  # 5% —Å–∫–∏–¥–∫–∞
    else:
        discount = 0  # –ë–µ–∑ —Å–∫–∏–¥–∫–∏

    cursor_user_register.execute('UPDATE users SET discount = ? WHERE user_id = ?', (discount, user_id,))
    base_user_register.commit()


# ====================== –ø–æ–¥—Å—á–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–æ–±—â–∞—è —Å–µ—Ç—å) ======================
def count_referals(user_id):
    referred_users = set()
    to_check = [user_id]

    while to_check:
        current_user = to_check.pop()
        referred_users.add(current_user)

        query = 'SELECT user_id FROM users WHERE referrer_id = ?'
        result = cursor_user_register.execute(query, (current_user,)).fetchall()

        for row in result:
            to_check.append(row[0])

    return len(referred_users)


# ====================== –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–∏–¥–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü—Ä–∏–º–µ–Ω–∏–º–∞ process_buy() ======================
def get_discount(user_id):
    cursor_user_register.execute('SELECT discount FROM users WHERE user_id = ?', (user_id,))
    result = cursor_user_register.fetchone()
    if result:
        return result[0]
    else:
        return 0


# ========================== –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª excel ==============================

def download_register_users():
    purchases = sql_get_all_register_users()
    print(purchases)
    df = pd.DataFrame(purchases, columns=['id', 'user_id', 'username', 'first_name', 'last_name', 'phone_number', 'email_address', 'purchase_date', 'discount', 'newsletter', 'referrer_id', 'confirmed_email'])
    current_datetime = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = f"users-register-{current_datetime}.xlsx"
    df.to_excel(filename, index=False)


def sql_get_all_register_users():
    return cursor_user_register.execute('SELECT * FROM users').fetchall()


# =================== ****************************************** ==========================


# =================== ****************************************** ==========================


# =================== ****************************************** ==========================


# =================== ****************************************** ==========================


# =================== ****************************************** ==========================


# =================== —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∫—É–ø–∫–∞—Ö –∫–ª–∏–µ–Ω—Ç–∞ =========================

def sql_start_user_purchases():
    global base_user_purchases, cursor_user_purchases
    base_user_purchases = sq.connect('UserPay.db')
    cursor_user_purchases = base_user_purchases.cursor()
    if base_user_purchases:
        print('User Pay Data base connected OK')
    cursor_user_purchases.execute(
        'CREATE TABLE IF NOT EXISTS purchases ('
        'user_id INTEGER, category TEXT, item_name TEXT, description TEXT, first_name TEXT, '
        'last_name TEXT, username TEXT, purchase_date TEXT, subscription_date TEXT, price REAL, total REAL)')
    base_user_purchases.commit()
    print('Table purchases created')

    load_user_pay()

# ======================== –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ google —Ç–∞–±–ª–∏—Ü—ã ========================


def load_user_pay():
    conn = sqlite3.connect('UserPay.db')
    cursor = conn.cursor()

    # # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
    cursor.execute('SELECT * FROM purchases ORDER BY purchase_date DESC LIMIT 1')
    last_user_pay_data = cursor.fetchone()

    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    credentials = service_account.Credentials.from_service_account_file('TestMir/my-project-bot-88845-fac16c8795e1.json',
                                                                        scopes=scope)
    client = gspread.authorize(credentials)
    spreadsheet = client.open_by_key(f'{GOOGLE}')
    worksheet = spreadsheet.get_worksheet(1)

    # –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    header_values = ['user_id', 'category', 'item_name', 'description', 'first_name', 'last_name', 'username', 'purchase_date', 'subscription_date', 'price', 'total']

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å, –¥–æ–±–∞–≤–∏—Ç—å –µ–µ –≤ —Ç–∞–±–ª–∏—Ü—É
    if last_user_pay_data:
        data_values = [str(value) for value in last_user_pay_data]
        worksheet.append_row(data_values)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π, –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        worksheet.append_row(header_values)

    print('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É Google.')
    conn.commit()
    conn.close()


def sql_get_user_purchases(user_id):
    return cursor_user_purchases.execute('SELECT * FROM purchases WHERE user_id=?', (user_id,)).fetchall()


# ========================== –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö —Ç–æ–≤–∞—Ä –≤ —Ñ–∞–π–ª excel ================================

def download_purchases():
    purchases = sql_get_all_purchases()
    print(purchases)
    df = pd.DataFrame(purchases, columns=['user_id', 'category', 'item_name', 'description', 'first_name', 'last_name', 'username', 'purchase_date', 'subscription_date', 'price', 'total'])
    current_datetime = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = f"pays-{current_datetime}.xlsx"
    df.to_excel(filename, index=False)


def sql_get_all_purchases():
    return cursor_user_purchases.execute('SELECT * FROM purchases').fetchall()






